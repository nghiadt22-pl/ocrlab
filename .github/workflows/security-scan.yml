name: Security Scan

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  frontend-security-scan:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run ESLint security plugin
        run: |
          npm install eslint-plugin-security
          npx eslint --plugin security --ext .js,.jsx,.ts,.tsx src/

  backend-security-scan:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r function_app/requirements.txt
          pip install bandit safety

      - name: Run Bandit (Python security linter)
        run: |
          bandit -r function_app/ -f json -o bandit-results.json
          cat bandit-results.json
        continue-on-error: true

      - name: Run Safety (check Python dependencies)
        run: |
          safety check -r function_app/requirements.txt --json > safety-results.json
          cat safety-results.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
          retention-days: 7

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.42.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    if: false  # Disabled until containers are used
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build container image
        run: |
          docker build -t ocr-lab:${{ github.sha }} .

      - name: Scan container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ocr-lab:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  security-report:
    name: Generate Security Report
    needs: [frontend-security-scan, backend-security-scan, secret-scanning, codeql-analysis]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download security scan results
        uses: actions/download-artifact@v3
        with:
          name: security-scan-results
          path: security-results
        continue-on-error: true

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan Date: $(date)" >> security-report.md
          echo "## Repository: ${{ github.repository }}" >> security-report.md
          echo "## Branch: ${{ github.ref }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Frontend Security Scan" >> security-report.md
          echo "Status: ${{ needs.frontend-security-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Backend Security Scan" >> security-report.md
          echo "Status: ${{ needs.backend-security-scan.result }}" >> security-report.md
          if [ -f "security-results/bandit-results.json" ]; then
            echo "### Bandit Results" >> security-report.md
            echo '```json' >> security-report.md
            cat security-results/bandit-results.json >> security-report.md
            echo '```' >> security-report.md
          fi
          if [ -f "security-results/safety-results.json" ]; then
            echo "### Safety Results" >> security-report.md
            echo '```json' >> security-report.md
            cat security-results/safety-results.json >> security-report.md
            echo '```' >> security-report.md
          fi
          echo "" >> security-report.md
          
          echo "## Secret Scanning" >> security-report.md
          echo "Status: ${{ needs.secret-scanning.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## CodeQL Analysis" >> security-report.md
          echo "Status: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "1. Review and address any high or critical vulnerabilities" >> security-report.md
          echo "2. Update dependencies with known security issues" >> security-report.md
          echo "3. Ensure no secrets are committed to the repository" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30 