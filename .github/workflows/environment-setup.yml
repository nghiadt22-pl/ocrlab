name: Environment Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to set up (development, staging, production)'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  AZURE_FUNCTIONAPP_NAME_DEV: 'testpl-dev'
  AZURE_FUNCTIONAPP_NAME_STAGING: 'testpl-staging'
  AZURE_FUNCTIONAPP_NAME_PROD: 'testpl'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './function_app'
  VERCEL_PROJECT_NAME_DEV: 'ocr-lab-dev'
  VERCEL_PROJECT_NAME_STAGING: 'ocr-lab-staging'
  VERCEL_PROJECT_NAME_PROD: 'ocr-lab'

jobs:
  setup-environment:
    name: Setup ${{ github.event.inputs.environment }} Environment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set environment variables
        id: set-env-vars
        run: |
          if [ "${{ github.event.inputs.environment }}" == "development" ]; then
            echo "AZURE_FUNCTIONAPP_NAME=${{ env.AZURE_FUNCTIONAPP_NAME_DEV }}" >> $GITHUB_ENV
            echo "VERCEL_PROJECT_NAME=${{ env.VERCEL_PROJECT_NAME_DEV }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "AZURE_FUNCTIONAPP_NAME=${{ env.AZURE_FUNCTIONAPP_NAME_STAGING }}" >> $GITHUB_ENV
            echo "VERCEL_PROJECT_NAME=${{ env.VERCEL_PROJECT_NAME_STAGING }}" >> $GITHUB_ENV
          else
            echo "AZURE_FUNCTIONAPP_NAME=${{ env.AZURE_FUNCTIONAPP_NAME_PROD }}" >> $GITHUB_ENV
            echo "VERCEL_PROJECT_NAME=${{ env.VERCEL_PROJECT_NAME_PROD }}" >> $GITHUB_ENV
          fi

      - name: Create Azure Function App (if not exists)
        run: |
          # Check if Function App exists
          EXISTS=$(az functionapp list --query "[?name=='${{ env.AZURE_FUNCTIONAPP_NAME }}'].name" -o tsv)
          
          if [ -z "$EXISTS" ]; then
            echo "Creating Azure Function App ${{ env.AZURE_FUNCTIONAPP_NAME }}"
            
            # Create resource group if it doesn't exist
            RG_EXISTS=$(az group list --query "[?name=='rg-${{ env.AZURE_FUNCTIONAPP_NAME }}'].name" -o tsv)
            if [ -z "$RG_EXISTS" ]; then
              az group create --name rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --location eastus
            fi
            
            # Create storage account
            STORAGE_ACCOUNT="${{ env.AZURE_FUNCTIONAPP_NAME }}storage"
            az storage account create --name $STORAGE_ACCOUNT --resource-group rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --location eastus --sku Standard_LRS
            
            # Create function app
            az functionapp create --name ${{ env.AZURE_FUNCTIONAPP_NAME }} --resource-group rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --storage-account $STORAGE_ACCOUNT --runtime python --runtime-version ${{ env.PYTHON_VERSION }} --functions-version 4 --consumption-plan-location eastus
            
            # Configure application settings
            az functionapp config appsettings set --name ${{ env.AZURE_FUNCTIONAPP_NAME }} --resource-group rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --settings \
              ENVIRONMENT=${{ github.event.inputs.environment }} \
              ENABLE_MOCK_MODE=${{ github.event.inputs.environment != 'production' }} \
              WEBSITE_RUN_FROM_PACKAGE=1
          else
            echo "Azure Function App ${{ env.AZURE_FUNCTIONAPP_NAME }} already exists"
          fi

      - name: Configure Vercel Project (if using Vercel)
        if: false  # Disabled for now, would require Vercel CLI authentication
        run: |
          # Install Vercel CLI
          npm install -g vercel
          
          # Configure Vercel project
          echo "This step would configure the Vercel project for ${{ github.event.inputs.environment }}"
          # vercel link --project ${{ env.VERCEL_PROJECT_NAME }}
          # vercel env add VITE_API_URL https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api
          # vercel env add VITE_ENVIRONMENT ${{ github.event.inputs.environment }}

      - name: Set up monitoring and logging
        run: |
          # Set up Application Insights for the Function App
          APPINSIGHTS_EXISTS=$(az monitor app-insights component show --app ${{ env.AZURE_FUNCTIONAPP_NAME }}-insights --resource-group rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --query name -o tsv 2>/dev/null || echo "")
          
          if [ -z "$APPINSIGHTS_EXISTS" ]; then
            echo "Creating Application Insights for ${{ env.AZURE_FUNCTIONAPP_NAME }}"
            az monitor app-insights component create --app ${{ env.AZURE_FUNCTIONAPP_NAME }}-insights --resource-group rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --location eastus
            
            # Get the instrumentation key
            INSTRUMENTATION_KEY=$(az monitor app-insights component show --app ${{ env.AZURE_FUNCTIONAPP_NAME }}-insights --resource-group rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --query instrumentationKey -o tsv)
            
            # Configure Function App with Application Insights
            az functionapp config appsettings set --name ${{ env.AZURE_FUNCTIONAPP_NAME }} --resource-group rg-${{ env.AZURE_FUNCTIONAPP_NAME }} --settings \
              APPINSIGHTS_INSTRUMENTATIONKEY=$INSTRUMENTATION_KEY
          else
            echo "Application Insights for ${{ env.AZURE_FUNCTIONAPP_NAME }} already exists"
          fi

      - name: Output environment information
        run: |
          echo "Environment ${{ github.event.inputs.environment }} setup complete"
          echo "Function App: ${{ env.AZURE_FUNCTIONAPP_NAME }}"
          echo "Function App URL: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
          echo "Application Insights: ${{ env.AZURE_FUNCTIONAPP_NAME }}-insights" 