---
description: General rules. Always refer to this first.
globs: 
alwaysApply: false
---
Overview is [PRD.md](mdc:docs/PRD.md). Tech used: [tech_stack.md](mdc:docs/tech_stack.md)

**ALWAYS TEST TO CONFIRM IF THE TASK IS COMPLETED**

**DEPLOY BACKEND ON AZURE FUNCTIONS USING ~~~func azure functionapp publish testpl~~~ AND ALWAYS TEST USING testpl.azurewebsites.net**
High-level overview of development:
Check the task list. Then, complete a task. Then, test the task. Then, update related documents if test success.
- If there's a bug, log bug to [bug_tracker.md](mdc:docs/bug_tracker.md). Then, understand the bug; search the web if necessary. Then, fix the bug.

- Check [project_tracker.md](mdc:docs/project_tracker.md) for task list.

Update [project_tracker.md](mdc:docs/project_tracker.md) and [progress_tracking.md](mdc:docs/progress_tracking.md) after completing a task.

Frontend guidelines = [frontend_guidelines.md](mdc:docs/frontend_guidelines.md)
Backend structure = [backend_structure.md](mdc:docs/backend_structure.md)

Documentation and Comments:

- Write meaningful comments and documentation only when necessary.
- Don't use personal pronouns like "I" or "we" in comments or documentation.
- Write documentation for all functions, classes, and modules.
- Write meaningful docstrings that describe the intention and behavior of the function, class, or module, and explain assumptions.
- Keep docstrings up to date and to the point.

Error Handling:

- Don't wrap code in try except blocks unless you're catching a specific exception.

Printing and Logging:

- Use a logger for all logging needs.

Dependencies:

- Pass dependencies to classes when they are initialized.

Naming Conventions:

- Start private class variables with an underscore.
- Use UPPERER_SNAKE_CASE for constants.

Execution Flow:

- When writing code, always write the tests first.
- Always run the tests to make sure the code works.

Clean Code:

- Write clean, readable, and maintainable code.
- Keep functions small and focused.
- Keep variables and functions names descriptive.
- Keep comments and documentation meaningful.

Development Flow:

- Always write the tests first.
- Always run the tests to make sure the code works.
- When given a task, write code and run it until it works well.

File Structure:

- Leave the **init**.py files empty.

Code Style:

- Always use single quotes for strings.

Rewrite, Improve, and Refactor:

- When refactoring or fixing code, make sure to keep the code clean and easy to understand without duplicating code.
- Keep the code clean and easy to understand.
- Keep the code DRY (Don't Repeat Yourself).
- Keep the code clean and easy to understand.
- After fixing an issue, mention the case in the docstring so future changes won't break it again.

Tests:

- Always write the tests first.
- Always run the tests to make sure the code works.
- Always keep the tests clean and up to date.
- Always run the tests in the venv.

Debugging:

- If you are not sure what the solution is, add debug prints to the code and run the tests.
- After fixing an issue remove the debug prints.

Async:

- Always use async unless the function is a simple function that doesn't need to be async.

Memory:

- When you need to remember something, update the [memory.md](mdc:docs/memory.md) file.
- Refer to the [memory.md](mdc:docs/memory.md) file to view the memory.
- Update the memory with project specifications, requirements, flow of the code, and other relevant information.
- Add instructions for development like how to add new pages to the memory.

Planning:

- Always plan the code before writing it.
- Think about how the new code will fit into the existing codebase.
- Think about how the new code will interact with the other parts of the codebase.
- Think about how the new code will handle errors and edge cases.
- Think about how the new code will be used by the frontend.
- Think about how the new code will be used by the users.
- Think about how the new code will be used by the developers.
