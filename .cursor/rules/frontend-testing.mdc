---
description: ALWAYS test frontend components after implementation to ensure functionality and prevent regressions
globs: src/**/*.tsx,src/**/*.jsx,src/**/*.ts,src/**/*.js
alwaysApply: false
---
# Frontend Component Testing Standards

<version>1.0.0</version>

## Context

Frontend components require thorough testing to ensure functionality, usability, and prevent regressions. This rule ensures that all frontend components are properly tested after implementation and before marking tasks as complete.

## Requirements

- All new components must have corresponding test files
- Tests must be written using Vitest and React Testing Library
- Tests must cover component rendering, user interactions, and state changes
- Test coverage should aim for at least 80% of component code
- Tests must be run and pass before marking tasks as complete
- Test results must be documented in the story file

## Testing Process

### Component Testing

1. Create a test file for each component in the `src/__tests__` directory
   ```
   src/
   ├── components/
   │   └── MyComponent.tsx
   └── __tests__/
       └── MyComponent.test.tsx
   ```

2. Write tests that cover:
   - Component rendering
   - User interactions (clicks, inputs, etc.)
   - State changes
   - Props validation
   - Error handling

3. Run tests using the npm test command
   ```bash
   npm test
   ```

4. Verify all tests pass before marking the task as complete

### Test Structure

Each test file should follow this structure:

```typescript
import { describe, it, expect, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import MyComponent from '../components/MyComponent';

// Mock dependencies as needed
vi.mock('../services/api', () => ({
  fetchData: vi.fn().mockResolvedValue({ data: 'test' })
}));

describe('MyComponent', () => {
  it('renders correctly', () => {
    render(<MyComponent />);
    expect(screen.getByText('Expected Text')).toBeInTheDocument();
  });

  it('handles user interaction', async () => {
    render(<MyComponent />);
    const button = screen.getByRole('button', { name: /click me/i });
    await userEvent.click(button);
    expect(screen.getByText('Clicked')).toBeInTheDocument();
  });

  // More test cases...
});
```

## Documentation

Document test results in the story file:

```markdown
### Testing Results

#### Component Testing
- Components tested: MyComponent, AnotherComponent
- Test coverage: 85%
- Results: All tests passed
```

## Examples

<example>
# Testing the Billing Component

## Component Testing
1. Created a test file for the Billing component
   ```bash
   touch src/__tests__/Billing.test.tsx
   ```

2. Wrote tests for rendering, tab switching, and user interactions
   ```typescript
   import { describe, it, expect, vi } from 'vitest';
   import { render, screen } from '@testing-library/react';
   import userEvent from '@testing-library/user-event';
   import { BrowserRouter } from 'react-router-dom';
   import Billing from '../pages/Billing';

   // Mock dependencies
   vi.mock('@clerk/clerk-react', () => ({
     useAuth: () => ({
       isSignedIn: true,
     }),
     useUser: () => ({
       user: {
         firstName: 'Test',
       },
     }),
   }));

   describe('Billing Component', () => {
     it('renders the billing page title', () => {
       render(
         <BrowserRouter>
           <Billing />
         </BrowserRouter>
       );
       expect(screen.getByText('Billing & Subscription')).toBeInTheDocument();
     });

     it('switches tabs when clicked', async () => {
       render(
         <BrowserRouter>
           <Billing />
         </BrowserRouter>
       );
       
       const invoicesTab = screen.getByRole('tab', { name: /invoices/i });
       await userEvent.click(invoicesTab);
       
       expect(screen.getByText('Billing History')).toBeInTheDocument();
     });
   });
   ```

3. Ran tests to verify functionality
   ```bash
   npm test
   ```

4. All tests passed, confirming the Billing component works as expected.

## Test Coverage
- Component rendering: ✅
- Tab switching: ✅
- User interactions: ✅
- Props validation: ✅
- Error handling: ✅

The Billing component has been thoroughly tested and is ready for review.
</example>

<example type="invalid">
# Implemented Billing Component

Added a new Billing component with subscription management, payment methods, and usage tracking.

The component looks good and should work fine.
</example>

## Critical Rules

- Never mark a frontend task as complete without writing and running tests
- Always create a test file for each new component
- Always test both rendering and user interactions
- Always run tests before marking tasks as complete
- Always document test results in the story file 